# 1 "src/tests.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "src/tests.c"




# 1 "include/iterate.h" 1
# 6 "src/tests.c" 2
# 1 "include/tests.h" 1
# 7 "src/tests.c" 2
# 1 "include/vector.h" 1




# 1 "/usr/local/include/Block.h" 1 3
# 44 "/usr/local/include/Block.h" 3

# 44 "/usr/local/include/Block.h" 3
extern void *_Block_copy(const void *aBlock);


extern void _Block_release(const void *aBlock);
# 6 "include/vector.h" 2
# 1 "/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2/include/stddef.h" 1 3 4
# 143 "/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 209 "/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 321 "/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2/include/stddef.h" 3 4
typedef int wchar_t;
# 415 "/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 426 "/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2/include/stddef.h" 3 4
} max_align_t;
# 7 "include/vector.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 465 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 452 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 453 "/usr/include/sys/cdefs.h" 2 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 454 "/usr/include/sys/cdefs.h" 2 3 4
# 466 "/usr/include/features.h" 2 3 4
# 489 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4
# 10 "/usr/include/gnu/stubs.h" 3 4
# 1 "/usr/include/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/gnu/stubs.h" 2 3 4
# 490 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/bits/libc-header-start.h" 2 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 55 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/floatn.h" 1 3 4
# 119 "/usr/include/bits/floatn.h" 3 4
# 1 "/usr/include/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/bits/floatn-common.h" 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 25 "/usr/include/bits/floatn-common.h" 2 3 4
# 120 "/usr/include/bits/floatn.h" 2 3 4
# 56 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;



extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/sys/types.h" 1 3 4
# 27 "/usr/include/sys/types.h" 3 4


# 1 "/usr/include/bits/types.h" 1 3 4
# 27 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/types.h" 2 3 4
# 1 "/usr/include/bits/timesize.h" 1 3 4
# 29 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 142 "/usr/include/bits/types.h" 2 3 4
# 1 "/usr/include/bits/time64.h" 1 3 4
# 143 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 30 "/usr/include/sys/types.h" 2 3 4



typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;
# 59 "/usr/include/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;
# 97 "/usr/include/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/sys/types.h" 2 3 4

# 1 "/usr/include/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 130 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/sys/types.h" 2 3 4
# 144 "/usr/include/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2/include/stddef.h" 1 3 4
# 145 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 24 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 35 "/usr/include/bits/endian.h" 3 4
# 1 "/usr/include/bits/endianness.h" 1 3 4
# 36 "/usr/include/bits/endian.h" 2 3 4
# 25 "/usr/include/endian.h" 2 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 33 "/usr/include/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/select.h" 1 3 4
# 30 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 31 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/sys/select.h" 2 3 4



# 1 "/usr/include/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/bits/types/struct_timespec.h" 1 3 4
# 10 "/usr/include/bits/types/struct_timespec.h" 3 4
struct timespec
{
  __time_t tv_sec;



  __syscall_slong_t tv_nsec;
# 26 "/usr/include/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/sys/select.h" 2 3 4



typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 59 "/usr/include/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/sys/select.h" 3 4

# 101 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/sys/select.h" 3 4

# 180 "/usr/include/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 227 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 22 "/usr/include/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 74 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/bits/struct_mutex.h" 3 4
};
# 75 "/usr/include/bits/thread-shared-types.h" 2 3 4
# 87 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/bits/struct_rwlock.h" 3 4
};
# 88 "/usr/include/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/sys/types.h" 2 3 4



# 395 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));



extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)));



extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 569 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 647 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 675 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 688 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 710 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 731 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 784 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;
# 800 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);
# 820 "/usr/include/stdlib.h" 3 4
extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 840 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
# 872 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__read_only__, 2)));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1, 3))) __attribute__ ((__access__ (__read_only__, 2)));






extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 958 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;
# 1004 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1014 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/stdlib-float.h" 1 3 4
# 1015 "/usr/include/stdlib.h" 2 3 4
# 1026 "/usr/include/stdlib.h" 3 4

# 8 "include/vector.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__write_only__, 1, 4)));




extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 91 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 125 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 1, 3)));



# 1 "/usr/include/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/bits/types/locale_t.h" 3 4
# 1 "/usr/include/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 157 "/usr/include/string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)))
     __attribute__ ((__access__ (__write_only__, 1, 3)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 230 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 257 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 277 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 307 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 334 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 391 "/usr/include/string.h" 3 4
extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
# 416 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__))

                        __attribute__ ((__nonnull__ (2)))
    __attribute__ ((__access__ (__write_only__, 2, 3)));
# 442 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-unknown-linux-gnu/10.2/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4










extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));



# 447 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));
# 473 "/usr/include/string.h" 3 4
extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 523 "/usr/include/string.h" 3 4

# 9 "include/vector.h" 2
# 8 "src/tests.c" 2


# 9 "src/tests.c"
vector_int vector_int_new(size_t capacity_increase) { struct _vector_int_private { size_t size, capacity, capacity_increase; int *items; }; struct _vector_int_private * __block private = malloc(sizeof(struct _vector_int_private)); private->size = 0; private->capacity_increase = capacity_increase > 0 ? capacity_increase : 4; private->capacity = private->capacity_increase; private->items = malloc(sizeof(int) * private->capacity); __block vector_int public = { .size = 
# 9 "src/tests.c" 3
((__typeof(
# 9 "src/tests.c"
^ size_t (void) { return private->size; }
# 9 "src/tests.c" 3
))_Block_copy((const void *)(
# 9 "src/tests.c"
^ size_t (void) { return private->size; }
# 9 "src/tests.c" 3
)))
# 9 "src/tests.c"
, .get = 
# 9 "src/tests.c" 3
((__typeof(
# 9 "src/tests.c"
^ int * (size_t index) { return index < private->size ? private->items + index : 
# 9 "src/tests.c" 3 4
((void *)0)
# 9 "src/tests.c"
; }
# 9 "src/tests.c" 3
))_Block_copy((const void *)(
# 9 "src/tests.c"
^ int * (size_t index) { return index < private->size ? private->items + index : 
# 9 "src/tests.c" 3 4
((void *)0)
# 9 "src/tests.c"
; }
# 9 "src/tests.c" 3
)))
# 9 "src/tests.c"
, .push = 
# 9 "src/tests.c" 3
((__typeof(
# 9 "src/tests.c"
^ (int item) { if (private->size >= private->capacity) { private->capacity += private->capacity_increase; private->items = realloc(private->items, private->capacity * sizeof(int)); } private->items[private->size] = item; ++private->size; }
# 9 "src/tests.c" 3
))_Block_copy((const void *)(
# 9 "src/tests.c"
^ (int item) { if (private->size >= private->capacity) { private->capacity += private->capacity_increase; private->items = realloc(private->items, private->capacity * sizeof(int)); } private->items[private->size] = item; ++private->size; }
# 9 "src/tests.c" 3
)))
# 9 "src/tests.c"
, .pop = 
# 9 "src/tests.c" 3
((__typeof(
# 9 "src/tests.c"
^ int * (void) { return private->size > 0 ? &private->items[(private->size--) - 1] : 
# 9 "src/tests.c" 3 4
((void *)0)
# 9 "src/tests.c"
; }
# 9 "src/tests.c" 3
))_Block_copy((const void *)(
# 9 "src/tests.c"
^ int * (void) { return private->size > 0 ? &private->items[(private->size--) - 1] : 
# 9 "src/tests.c" 3 4
((void *)0)
# 9 "src/tests.c"
; }
# 9 "src/tests.c" 3
)))
# 9 "src/tests.c"
, .insert = 
# 9 "src/tests.c" 3
((__typeof(
# 9 "src/tests.c"
^ (size_t index, int value) { if (index < private->size) private->items[index] = value; }
# 9 "src/tests.c" 3
))_Block_copy((const void *)(
# 9 "src/tests.c"
^ (size_t index, int value) { if (index < private->size) private->items[index] = value; }
# 9 "src/tests.c" 3
)))
# 9 "src/tests.c"
, .remove = 
# 9 "src/tests.c" 3
((__typeof(
# 9 "src/tests.c"
^ (size_t index) { if (index < private->size - 1) memmove( &private->items[index], &private->items[index+1], (private->size - index - 1) * sizeof(int) ); --private->size; }
# 9 "src/tests.c" 3
))_Block_copy((const void *)(
# 9 "src/tests.c"
^ (size_t index) { if (index < private->size - 1) memmove( &private->items[index], &private->items[index+1], (private->size - index - 1) * sizeof(int) ); --private->size; }
# 9 "src/tests.c" 3
)))
# 9 "src/tests.c"
, .begin = 
# 9 "src/tests.c" 3
((__typeof(
# 9 "src/tests.c"
^ int * (void) { return private->size > 0 ? private->items[0] : 
# 9 "src/tests.c" 3 4
((void *)0)
# 9 "src/tests.c"
; }
# 9 "src/tests.c" 3
))_Block_copy((const void *)(
# 9 "src/tests.c"
^ int * (void) { return private->size > 0 ? private->items[0] : 
# 9 "src/tests.c" 3 4
((void *)0)
# 9 "src/tests.c"
; }
# 9 "src/tests.c" 3
)))
# 9 "src/tests.c"
, .end = 
# 9 "src/tests.c" 3
((__typeof(
# 9 "src/tests.c"
^ int * (void) { return private->size > 0 ? private->items[private->size-1] : 
# 9 "src/tests.c" 3 4
((void *)0)
# 9 "src/tests.c"
; }
# 9 "src/tests.c" 3
))_Block_copy((const void *)(
# 9 "src/tests.c"
^ int * (void) { return private->size > 0 ? private->items[private->size-1] : 
# 9 "src/tests.c" 3 4
((void *)0)
# 9 "src/tests.c"
; }
# 9 "src/tests.c" 3
)))
# 9 "src/tests.c"
, .next = 
# 9 "src/tests.c" 3
((__typeof(
# 9 "src/tests.c"
^ (int **item) { if (item != 
# 9 "src/tests.c" 3 4
((void *)0)
# 9 "src/tests.c"
) *item += sizeof(int); }
# 9 "src/tests.c" 3
))_Block_copy((const void *)(
# 9 "src/tests.c"
^ (int **item) { if (item != 
# 9 "src/tests.c" 3 4
((void *)0)
# 9 "src/tests.c"
) *item += sizeof(int); }
# 9 "src/tests.c" 3
)))
# 9 "src/tests.c"
, .free = 
# 9 "src/tests.c" 3 4
((void *)0) 
# 9 "src/tests.c"
}; public.free = 
# 9 "src/tests.c" 3
((__typeof(
# 9 "src/tests.c"
^ { free(private->items); free(private); 
# 9 "src/tests.c" 3
_Block_release((const void *)(
# 9 "src/tests.c"
public.size
# 9 "src/tests.c" 3
))
# 9 "src/tests.c"
; 
# 9 "src/tests.c" 3
_Block_release((const void *)(
# 9 "src/tests.c"
public.get
# 9 "src/tests.c" 3
))
# 9 "src/tests.c"
; 
# 9 "src/tests.c" 3
_Block_release((const void *)(
# 9 "src/tests.c"
public.push
# 9 "src/tests.c" 3
))
# 9 "src/tests.c"
; 
# 9 "src/tests.c" 3
_Block_release((const void *)(
# 9 "src/tests.c"
public.pop
# 9 "src/tests.c" 3
))
# 9 "src/tests.c"
; 
# 9 "src/tests.c" 3
_Block_release((const void *)(
# 9 "src/tests.c"
public.insert
# 9 "src/tests.c" 3
))
# 9 "src/tests.c"
; 
# 9 "src/tests.c" 3
_Block_release((const void *)(
# 9 "src/tests.c"
public.remove
# 9 "src/tests.c" 3
))
# 9 "src/tests.c"
; 
# 9 "src/tests.c" 3
_Block_release((const void *)(
# 9 "src/tests.c"
public.free
# 9 "src/tests.c" 3
))
# 9 "src/tests.c"
; }
# 9 "src/tests.c" 3
))_Block_copy((const void *)(
# 9 "src/tests.c"
^ { free(private->items); free(private); 
# 9 "src/tests.c" 3
_Block_release((const void *)(
# 9 "src/tests.c"
public.size
# 9 "src/tests.c" 3
))
# 9 "src/tests.c"
; 
# 9 "src/tests.c" 3
_Block_release((const void *)(
# 9 "src/tests.c"
public.get
# 9 "src/tests.c" 3
))
# 9 "src/tests.c"
; 
# 9 "src/tests.c" 3
_Block_release((const void *)(
# 9 "src/tests.c"
public.push
# 9 "src/tests.c" 3
))
# 9 "src/tests.c"
; 
# 9 "src/tests.c" 3
_Block_release((const void *)(
# 9 "src/tests.c"
public.pop
# 9 "src/tests.c" 3
))
# 9 "src/tests.c"
; 
# 9 "src/tests.c" 3
_Block_release((const void *)(
# 9 "src/tests.c"
public.insert
# 9 "src/tests.c" 3
))
# 9 "src/tests.c"
; 
# 9 "src/tests.c" 3
_Block_release((const void *)(
# 9 "src/tests.c"
public.remove
# 9 "src/tests.c" 3
))
# 9 "src/tests.c"
; 
# 9 "src/tests.c" 3
_Block_release((const void *)(
# 9 "src/tests.c"
public.free
# 9 "src/tests.c" 3
))
# 9 "src/tests.c"
; }
# 9 "src/tests.c" 3
)))
# 9 "src/tests.c"
; return public; } void vector_int_free(vector_int *self) { self->free(); }
vector_double vector_double_new(size_t capacity_increase) { struct _vector_double_private { size_t size, capacity, capacity_increase; double *items; }; struct _vector_double_private * __block private = malloc(sizeof(struct _vector_double_private)); private->size = 0; private->capacity_increase = capacity_increase > 0 ? capacity_increase : 4; private->capacity = private->capacity_increase; private->items = malloc(sizeof(double) * private->capacity); __block vector_double public = { .size = 
# 10 "src/tests.c" 3
((__typeof(
# 10 "src/tests.c"
^ size_t (void) { return private->size; }
# 10 "src/tests.c" 3
))_Block_copy((const void *)(
# 10 "src/tests.c"
^ size_t (void) { return private->size; }
# 10 "src/tests.c" 3
)))
# 10 "src/tests.c"
, .get = 
# 10 "src/tests.c" 3
((__typeof(
# 10 "src/tests.c"
^ double * (size_t index) { return index < private->size ? private->items + index : 
# 10 "src/tests.c" 3 4
((void *)0)
# 10 "src/tests.c"
; }
# 10 "src/tests.c" 3
))_Block_copy((const void *)(
# 10 "src/tests.c"
^ double * (size_t index) { return index < private->size ? private->items + index : 
# 10 "src/tests.c" 3 4
((void *)0)
# 10 "src/tests.c"
; }
# 10 "src/tests.c" 3
)))
# 10 "src/tests.c"
, .push = 
# 10 "src/tests.c" 3
((__typeof(
# 10 "src/tests.c"
^ (double item) { if (private->size >= private->capacity) { private->capacity += private->capacity_increase; private->items = realloc(private->items, private->capacity * sizeof(double)); } private->items[private->size] = item; ++private->size; }
# 10 "src/tests.c" 3
))_Block_copy((const void *)(
# 10 "src/tests.c"
^ (double item) { if (private->size >= private->capacity) { private->capacity += private->capacity_increase; private->items = realloc(private->items, private->capacity * sizeof(double)); } private->items[private->size] = item; ++private->size; }
# 10 "src/tests.c" 3
)))
# 10 "src/tests.c"
, .pop = 
# 10 "src/tests.c" 3
((__typeof(
# 10 "src/tests.c"
^ double * (void) { return private->size > 0 ? &private->items[(private->size--) - 1] : 
# 10 "src/tests.c" 3 4
((void *)0)
# 10 "src/tests.c"
; }
# 10 "src/tests.c" 3
))_Block_copy((const void *)(
# 10 "src/tests.c"
^ double * (void) { return private->size > 0 ? &private->items[(private->size--) - 1] : 
# 10 "src/tests.c" 3 4
((void *)0)
# 10 "src/tests.c"
; }
# 10 "src/tests.c" 3
)))
# 10 "src/tests.c"
, .insert = 
# 10 "src/tests.c" 3
((__typeof(
# 10 "src/tests.c"
^ (size_t index, double value) { if (index < private->size) private->items[index] = value; }
# 10 "src/tests.c" 3
))_Block_copy((const void *)(
# 10 "src/tests.c"
^ (size_t index, double value) { if (index < private->size) private->items[index] = value; }
# 10 "src/tests.c" 3
)))
# 10 "src/tests.c"
, .remove = 
# 10 "src/tests.c" 3
((__typeof(
# 10 "src/tests.c"
^ (size_t index) { if (index < private->size - 1) memmove( &private->items[index], &private->items[index+1], (private->size - index - 1) * sizeof(double) ); --private->size; }
# 10 "src/tests.c" 3
))_Block_copy((const void *)(
# 10 "src/tests.c"
^ (size_t index) { if (index < private->size - 1) memmove( &private->items[index], &private->items[index+1], (private->size - index - 1) * sizeof(double) ); --private->size; }
# 10 "src/tests.c" 3
)))
# 10 "src/tests.c"
, .begin = 
# 10 "src/tests.c" 3
((__typeof(
# 10 "src/tests.c"
^ double * (void) { return private->size > 0 ? private->items[0] : 
# 10 "src/tests.c" 3 4
((void *)0)
# 10 "src/tests.c"
; }
# 10 "src/tests.c" 3
))_Block_copy((const void *)(
# 10 "src/tests.c"
^ double * (void) { return private->size > 0 ? private->items[0] : 
# 10 "src/tests.c" 3 4
((void *)0)
# 10 "src/tests.c"
; }
# 10 "src/tests.c" 3
)))
# 10 "src/tests.c"
, .end = 
# 10 "src/tests.c" 3
((__typeof(
# 10 "src/tests.c"
^ double * (void) { return private->size > 0 ? private->items[private->size-1] : 
# 10 "src/tests.c" 3 4
((void *)0)
# 10 "src/tests.c"
; }
# 10 "src/tests.c" 3
))_Block_copy((const void *)(
# 10 "src/tests.c"
^ double * (void) { return private->size > 0 ? private->items[private->size-1] : 
# 10 "src/tests.c" 3 4
((void *)0)
# 10 "src/tests.c"
; }
# 10 "src/tests.c" 3
)))
# 10 "src/tests.c"
, .next = 
# 10 "src/tests.c" 3
((__typeof(
# 10 "src/tests.c"
^ (double **item) { if (item != 
# 10 "src/tests.c" 3 4
((void *)0)
# 10 "src/tests.c"
) *item += sizeof(double); }
# 10 "src/tests.c" 3
))_Block_copy((const void *)(
# 10 "src/tests.c"
^ (double **item) { if (item != 
# 10 "src/tests.c" 3 4
((void *)0)
# 10 "src/tests.c"
) *item += sizeof(double); }
# 10 "src/tests.c" 3
)))
# 10 "src/tests.c"
, .free = 
# 10 "src/tests.c" 3 4
((void *)0) 
# 10 "src/tests.c"
}; public.free = 
# 10 "src/tests.c" 3
((__typeof(
# 10 "src/tests.c"
^ { free(private->items); free(private); 
# 10 "src/tests.c" 3
_Block_release((const void *)(
# 10 "src/tests.c"
public.size
# 10 "src/tests.c" 3
))
# 10 "src/tests.c"
; 
# 10 "src/tests.c" 3
_Block_release((const void *)(
# 10 "src/tests.c"
public.get
# 10 "src/tests.c" 3
))
# 10 "src/tests.c"
; 
# 10 "src/tests.c" 3
_Block_release((const void *)(
# 10 "src/tests.c"
public.push
# 10 "src/tests.c" 3
))
# 10 "src/tests.c"
; 
# 10 "src/tests.c" 3
_Block_release((const void *)(
# 10 "src/tests.c"
public.pop
# 10 "src/tests.c" 3
))
# 10 "src/tests.c"
; 
# 10 "src/tests.c" 3
_Block_release((const void *)(
# 10 "src/tests.c"
public.insert
# 10 "src/tests.c" 3
))
# 10 "src/tests.c"
; 
# 10 "src/tests.c" 3
_Block_release((const void *)(
# 10 "src/tests.c"
public.remove
# 10 "src/tests.c" 3
))
# 10 "src/tests.c"
; 
# 10 "src/tests.c" 3
_Block_release((const void *)(
# 10 "src/tests.c"
public.free
# 10 "src/tests.c" 3
))
# 10 "src/tests.c"
; }
# 10 "src/tests.c" 3
))_Block_copy((const void *)(
# 10 "src/tests.c"
^ { free(private->items); free(private); 
# 10 "src/tests.c" 3
_Block_release((const void *)(
# 10 "src/tests.c"
public.size
# 10 "src/tests.c" 3
))
# 10 "src/tests.c"
; 
# 10 "src/tests.c" 3
_Block_release((const void *)(
# 10 "src/tests.c"
public.get
# 10 "src/tests.c" 3
))
# 10 "src/tests.c"
; 
# 10 "src/tests.c" 3
_Block_release((const void *)(
# 10 "src/tests.c"
public.push
# 10 "src/tests.c" 3
))
# 10 "src/tests.c"
; 
# 10 "src/tests.c" 3
_Block_release((const void *)(
# 10 "src/tests.c"
public.pop
# 10 "src/tests.c" 3
))
# 10 "src/tests.c"
; 
# 10 "src/tests.c" 3
_Block_release((const void *)(
# 10 "src/tests.c"
public.insert
# 10 "src/tests.c" 3
))
# 10 "src/tests.c"
; 
# 10 "src/tests.c" 3
_Block_release((const void *)(
# 10 "src/tests.c"
public.remove
# 10 "src/tests.c" 3
))
# 10 "src/tests.c"
; 
# 10 "src/tests.c" 3
_Block_release((const void *)(
# 10 "src/tests.c"
public.free
# 10 "src/tests.c" 3
))
# 10 "src/tests.c"
; }
# 10 "src/tests.c" 3
)))
# 10 "src/tests.c"
; return public; } void vector_double_free(vector_double *self) { self->free(); }
vector_vector_double vector_vector_double_new(size_t capacity_increase) { struct _vector_vector_double_private { size_t size, capacity, capacity_increase; vector_double *items; }; struct _vector_vector_double_private * __block private = malloc(sizeof(struct _vector_vector_double_private)); private->size = 0; private->capacity_increase = capacity_increase > 0 ? capacity_increase : 4; private->capacity = private->capacity_increase; private->items = malloc(sizeof(vector_double) * private->capacity); __block vector_vector_double public = { .size = 
# 11 "src/tests.c" 3
((__typeof(
# 11 "src/tests.c"
^ size_t (void) { return private->size; }
# 11 "src/tests.c" 3
))_Block_copy((const void *)(
# 11 "src/tests.c"
^ size_t (void) { return private->size; }
# 11 "src/tests.c" 3
)))
# 11 "src/tests.c"
, .get = 
# 11 "src/tests.c" 3
((__typeof(
# 11 "src/tests.c"
^ vector_double * (size_t index) { return index < private->size ? private->items + index : 
# 11 "src/tests.c" 3 4
((void *)0)
# 11 "src/tests.c"
; }
# 11 "src/tests.c" 3
))_Block_copy((const void *)(
# 11 "src/tests.c"
^ vector_double * (size_t index) { return index < private->size ? private->items + index : 
# 11 "src/tests.c" 3 4
((void *)0)
# 11 "src/tests.c"
; }
# 11 "src/tests.c" 3
)))
# 11 "src/tests.c"
, .push = 
# 11 "src/tests.c" 3
((__typeof(
# 11 "src/tests.c"
^ (vector_double item) { if (private->size >= private->capacity) { private->capacity += private->capacity_increase; private->items = realloc(private->items, private->capacity * sizeof(vector_double)); } private->items[private->size] = item; ++private->size; }
# 11 "src/tests.c" 3
))_Block_copy((const void *)(
# 11 "src/tests.c"
^ (vector_double item) { if (private->size >= private->capacity) { private->capacity += private->capacity_increase; private->items = realloc(private->items, private->capacity * sizeof(vector_double)); } private->items[private->size] = item; ++private->size; }
# 11 "src/tests.c" 3
)))
# 11 "src/tests.c"
, .pop = 
# 11 "src/tests.c" 3
((__typeof(
# 11 "src/tests.c"
^ vector_double * (void) { return private->size > 0 ? &private->items[(private->size--) - 1] : 
# 11 "src/tests.c" 3 4
((void *)0)
# 11 "src/tests.c"
; }
# 11 "src/tests.c" 3
))_Block_copy((const void *)(
# 11 "src/tests.c"
^ vector_double * (void) { return private->size > 0 ? &private->items[(private->size--) - 1] : 
# 11 "src/tests.c" 3 4
((void *)0)
# 11 "src/tests.c"
; }
# 11 "src/tests.c" 3
)))
# 11 "src/tests.c"
, .insert = 
# 11 "src/tests.c" 3
((__typeof(
# 11 "src/tests.c"
^ (size_t index, vector_double value) { if (index < private->size) private->items[index] = value; }
# 11 "src/tests.c" 3
))_Block_copy((const void *)(
# 11 "src/tests.c"
^ (size_t index, vector_double value) { if (index < private->size) private->items[index] = value; }
# 11 "src/tests.c" 3
)))
# 11 "src/tests.c"
, .remove = 
# 11 "src/tests.c" 3
((__typeof(
# 11 "src/tests.c"
^ (size_t index) { if (index < private->size - 1) memmove( &private->items[index], &private->items[index+1], (private->size - index - 1) * sizeof(vector_double) ); --private->size; }
# 11 "src/tests.c" 3
))_Block_copy((const void *)(
# 11 "src/tests.c"
^ (size_t index) { if (index < private->size - 1) memmove( &private->items[index], &private->items[index+1], (private->size - index - 1) * sizeof(vector_double) ); --private->size; }
# 11 "src/tests.c" 3
)))
# 11 "src/tests.c"
, .begin = 
# 11 "src/tests.c" 3
((__typeof(
# 11 "src/tests.c"
^ vector_double * (void) { return private->size > 0 ? private->items[0] : 
# 11 "src/tests.c" 3 4
((void *)0)
# 11 "src/tests.c"
; }
# 11 "src/tests.c" 3
))_Block_copy((const void *)(
# 11 "src/tests.c"
^ vector_double * (void) { return private->size > 0 ? private->items[0] : 
# 11 "src/tests.c" 3 4
((void *)0)
# 11 "src/tests.c"
; }
# 11 "src/tests.c" 3
)))
# 11 "src/tests.c"
, .end = 
# 11 "src/tests.c" 3
((__typeof(
# 11 "src/tests.c"
^ vector_double * (void) { return private->size > 0 ? private->items[private->size-1] : 
# 11 "src/tests.c" 3 4
((void *)0)
# 11 "src/tests.c"
; }
# 11 "src/tests.c" 3
))_Block_copy((const void *)(
# 11 "src/tests.c"
^ vector_double * (void) { return private->size > 0 ? private->items[private->size-1] : 
# 11 "src/tests.c" 3 4
((void *)0)
# 11 "src/tests.c"
; }
# 11 "src/tests.c" 3
)))
# 11 "src/tests.c"
, .next = 
# 11 "src/tests.c" 3
((__typeof(
# 11 "src/tests.c"
^ (vector_double **item) { if (item != 
# 11 "src/tests.c" 3 4
((void *)0)
# 11 "src/tests.c"
) *item += sizeof(vector_double); }
# 11 "src/tests.c" 3
))_Block_copy((const void *)(
# 11 "src/tests.c"
^ (vector_double **item) { if (item != 
# 11 "src/tests.c" 3 4
((void *)0)
# 11 "src/tests.c"
) *item += sizeof(vector_double); }
# 11 "src/tests.c" 3
)))
# 11 "src/tests.c"
, .free = 
# 11 "src/tests.c" 3 4
((void *)0) 
# 11 "src/tests.c"
}; public.free = 
# 11 "src/tests.c" 3
((__typeof(
# 11 "src/tests.c"
^ { free(private->items); free(private); 
# 11 "src/tests.c" 3
_Block_release((const void *)(
# 11 "src/tests.c"
public.size
# 11 "src/tests.c" 3
))
# 11 "src/tests.c"
; 
# 11 "src/tests.c" 3
_Block_release((const void *)(
# 11 "src/tests.c"
public.get
# 11 "src/tests.c" 3
))
# 11 "src/tests.c"
; 
# 11 "src/tests.c" 3
_Block_release((const void *)(
# 11 "src/tests.c"
public.push
# 11 "src/tests.c" 3
))
# 11 "src/tests.c"
; 
# 11 "src/tests.c" 3
_Block_release((const void *)(
# 11 "src/tests.c"
public.pop
# 11 "src/tests.c" 3
))
# 11 "src/tests.c"
; 
# 11 "src/tests.c" 3
_Block_release((const void *)(
# 11 "src/tests.c"
public.insert
# 11 "src/tests.c" 3
))
# 11 "src/tests.c"
; 
# 11 "src/tests.c" 3
_Block_release((const void *)(
# 11 "src/tests.c"
public.remove
# 11 "src/tests.c" 3
))
# 11 "src/tests.c"
; 
# 11 "src/tests.c" 3
_Block_release((const void *)(
# 11 "src/tests.c"
public.free
# 11 "src/tests.c" 3
))
# 11 "src/tests.c"
; }
# 11 "src/tests.c" 3
))_Block_copy((const void *)(
# 11 "src/tests.c"
^ { free(private->items); free(private); 
# 11 "src/tests.c" 3
_Block_release((const void *)(
# 11 "src/tests.c"
public.size
# 11 "src/tests.c" 3
))
# 11 "src/tests.c"
; 
# 11 "src/tests.c" 3
_Block_release((const void *)(
# 11 "src/tests.c"
public.get
# 11 "src/tests.c" 3
))
# 11 "src/tests.c"
; 
# 11 "src/tests.c" 3
_Block_release((const void *)(
# 11 "src/tests.c"
public.push
# 11 "src/tests.c" 3
))
# 11 "src/tests.c"
; 
# 11 "src/tests.c" 3
_Block_release((const void *)(
# 11 "src/tests.c"
public.pop
# 11 "src/tests.c" 3
))
# 11 "src/tests.c"
; 
# 11 "src/tests.c" 3
_Block_release((const void *)(
# 11 "src/tests.c"
public.insert
# 11 "src/tests.c" 3
))
# 11 "src/tests.c"
; 
# 11 "src/tests.c" 3
_Block_release((const void *)(
# 11 "src/tests.c"
public.remove
# 11 "src/tests.c" 3
))
# 11 "src/tests.c"
; 
# 11 "src/tests.c" 3
_Block_release((const void *)(
# 11 "src/tests.c"
public.free
# 11 "src/tests.c" 3
))
# 11 "src/tests.c"
; }
# 11 "src/tests.c" 3
)))
# 11 "src/tests.c"
; return public; } void vector_vector_double_free(vector_vector_double *self) { self->free(); }
# 43 "src/tests.c"
bool test_vector_int(int def) { __attribute__((cleanup(vector_int_free))) vector_int vector = vector_int_new(0); int *get1, *get2; size_t i, j; for (i = 1; i < 10001; ++i) { vector.push(def); for (j = i - 1; j > 0; --j) { get1 = vector.get(j); get2 = vector.get(j+1); if (get1 != 
# 43 "src/tests.c" 3 4
((void *)0) 
# 43 "src/tests.c"
&& get2 != 
# 43 "src/tests.c" 3 4
((void *)0)
# 43 "src/tests.c"
) *get1 = *get2; vector.insert(j, def); } } for (i = 1; i < vector.size(); ++i) { vector.pop(); for (j = i - 1; j > 0; --j) { get1 = vector.get(j); get2 = vector.get(j+1); if (get1 != 
# 43 "src/tests.c" 3 4
((void *)0) 
# 43 "src/tests.c"
&& get2 != 
# 43 "src/tests.c" 3 4
((void *)0)
# 43 "src/tests.c"
) *get2 = *get1; if (j % 50 == 0) vector.remove(j); } } vector.free(); return true; }
bool test_vector_double(double def) { __attribute__((cleanup(vector_double_free))) vector_double vector = vector_double_new(0); double *get1, *get2; size_t i, j; for (i = 1; i < 10001; ++i) { vector.push(def); for (j = i - 1; j > 0; --j) { get1 = vector.get(j); get2 = vector.get(j+1); if (get1 != 
# 44 "src/tests.c" 3 4
((void *)0) 
# 44 "src/tests.c"
&& get2 != 
# 44 "src/tests.c" 3 4
((void *)0)
# 44 "src/tests.c"
) *get1 = *get2; vector.insert(j, def); } } for (i = 1; i < vector.size(); ++i) { vector.pop(); for (j = i - 1; j > 0; --j) { get1 = vector.get(j); get2 = vector.get(j+1); if (get1 != 
# 44 "src/tests.c" 3 4
((void *)0) 
# 44 "src/tests.c"
&& get2 != 
# 44 "src/tests.c" 3 4
((void *)0)
# 44 "src/tests.c"
) *get2 = *get1; if (j % 50 == 0) vector.remove(j); } } vector.free(); return true; }
bool test_vector_vector_double(vector_double def) { __attribute__((cleanup(vector_vector_double_free))) vector_vector_double vector = vector_vector_double_new(0); vector_double *get1, *get2; size_t i, j; for (i = 1; i < 10001; ++i) { vector.push(def); for (j = i - 1; j > 0; --j) { get1 = vector.get(j); get2 = vector.get(j+1); if (get1 != 
# 45 "src/tests.c" 3 4
((void *)0) 
# 45 "src/tests.c"
&& get2 != 
# 45 "src/tests.c" 3 4
((void *)0)
# 45 "src/tests.c"
) *get1 = *get2; vector.insert(j, def); } } for (i = 1; i < vector.size(); ++i) { vector.pop(); for (j = i - 1; j > 0; --j) { get1 = vector.get(j); get2 = vector.get(j+1); if (get1 != 
# 45 "src/tests.c" 3 4
((void *)0) 
# 45 "src/tests.c"
&& get2 != 
# 45 "src/tests.c" 3 4
((void *)0)
# 45 "src/tests.c"
) *get2 = *get1; if (j % 50 == 0) vector.remove(j); } } vector.free(); return true; }

void run_vector_tests() {
 printf("test_vector_int: %s\n",
  test_vector_int(1122334455) ? "ok" : "fail");
 printf("test_vector_double: %s\n",
  test_vector_double(554433.221101) ? "ok" : "fail");
 vector_double test_vector = vector_double_new(0);
 printf("test_vector_vector_double: %s\n",
  test_vector_vector_double(test_vector) ? "ok" : "fail");
 test_vector.free();
}

bool test_foreach_vector() {
 vector_int vector = vector_int_new(0);
 for (int i = 0; i < 10000; ++i)
  vector.push(i);
 int i = 0;
 for (int *item = (vector).begin(); item < vector.end(); vector.next(&(item))) {
  if (!(*item == (i++)))
   return false;
 }
 if (i != vector.size())

failed: vector.free()
 return false;
}

void run_iterator_tests() {
 printf("test_foreach_vector: %s\n",
  test_foreach_vector() ? "ok": "fail");
}

void run_tests() {
 run_vector_tests();
}
